using UnityEngine;
using UnityEditor;
using System.IO;
using System.Text;
using System.Collections.Generic;

namespace Cu1uSFX.Internal
{
    [CustomEditor(typeof(SFXList))]
    public class SFXList_Editor : Editor
    {
        static string SFXListScriptPath;

        public override void OnInspectorGUI()
        {
            SFXList sfxList = (SFXList)serializedObject.targetObject;
            if (sfxList != SFXList.Instance)
            {
                EditorGUILayout.LabelField("Invalid SFX List object.");
                EditorGUILayout.LabelField($"To load correctly, a SFXList asset named '{SFXList.SINGLETON_ASSET_NAME}' should exist inside the Resources folder.");
                return;
            }
            EditorGUILayout.Space(10);
            if (GUILayout.Button("Open SFX Editor"))
            {
                SFX_Window_Editor.Spawn();
            }
            EditorGUILayout.LabelField("The SFX editor can also be opened using the Window/SFX Editor tab.");
        }

        [InitializeOnLoadMethod]
        static void GetSFXListScriptPath()
        {
            SFXListScriptPath = AssetDatabase.GetAssetPath(MonoScript.FromScriptableObject(SFXList.Instance));
        }

        public static void GenerateEnumScript()
        {
            ref SFXDefinition[] definitions = ref SFXList.Instance.Definitions;
            string[] names = new string[definitions.Length];
            for (int i = 0; i < definitions.Length; i++)
            {
                names[i] = definitions[i].Name;
            }
            GenerateEnumScriptFromNames(names);
            SFXList.Instance.EnumNames = new List<string>(names);
        }

        static void GenerateEnumScriptFromNames(string[] enumNames)
        {
            if (string.IsNullOrWhiteSpace(SFXListScriptPath))
                GetSFXListScriptPath();

            string scriptPath = Path.Combine(SFXListScriptPath, "../SFXEnum.cs");
            Debug.Log("Generating enum script at " + scriptPath);

            List<string> addedNames = new();

            using StreamWriter writer = new(scriptPath);

            writer.WriteLine("namespace Cu1uSFX");
            writer.WriteLine("{");
            writer.WriteLine("    // DO NOT EDIT - this file is automatically generated by SFXList_Editor as you define sounds in the SFX List asset. Changes made here will be overwritten.");
            writer.WriteLine("    public enum SFX");
            writer.WriteLine("    {");
            writer.WriteLine("        None = 0" + (enumNames.Length > 0 ? "," : string.Empty));
            for (int i = 1; i <= enumNames.Length; i++)
            {
                string line = FormatEnumName(enumNames[i - 1]);

                if (string.IsNullOrEmpty(line))
                    continue;
                if (addedNames.Contains(line))
                    continue;

                addedNames.Add(line);

                line = $"        {line}";
                if (i != enumNames.Length)
                    line += ",";
                writer.WriteLine(line);
            }
            writer.WriteLine("    }");
            writer.WriteLine("}");
        }

        public static string FormatEnumName(string name)
        {
            StringBuilder sb = new();
            foreach (char c in name)
            {
                if (char.IsLetter(c))
                {
                    sb.Append(c);
                    continue;
                }
                if (char.IsNumber(c) && sb.Length != 0)
                {
                    sb.Append(c);
                    continue;
                }
            }
            return sb.ToString();
        }

        public static void RecompileScripts()
        {
#if UNITY_2019_3_OR_NEWER
            UnityEditor.Compilation.CompilationPipeline.RequestScriptCompilation();
#elif UNITY_2017_1_OR_NEWER
            System.Reflection.Assembly editorAssembly = System.Reflection.Assembly.GetAssembly(typeof(Editor));
            System.Type editorCompilationInterfaceType = editorAssembly.GetType("UnityEditor.Scripting.ScriptCompilation.EditorCompilationInterface");
            System.Reflection.MethodInfo dirtyAllScriptsMethod = editorCompilationInterfaceType.GetMethod("DirtyAllScripts", System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public);
            dirtyAllScriptsMethod.Invoke(editorCompilationInterfaceType, null);
#endif
        }
    }

    // [CustomPropertyDrawer(typeof(SFXDefinition))]
    // public class SFXDefinition_Editor : PropertyDrawer
    // {
    //     const float EDITING_INDENT = 20f;
    //     public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
    //     {
    //         SerializedProperty editingProp = property.FindPropertyRelative(nameof(SFXDefinition.Editor_Editing));
    //         Rect rect = position;
    //         rect.height = EditorGUIUtility.singleLineHeight;
    //         Rect drawRect = rect;
    //         if (editingProp.boolValue)
    //         {
    //             drawRect.width /= 2;
    //             GUI.Label(drawRect, "editing!!");
    //             drawRect.x += drawRect.width;
    //             if (GUI.Button(drawRect, "Stop editing"))
    //             {
    //                 editingProp.boolValue = false;
    //             }

    //             rect.width -= EDITING_INDENT;
    //             rect.x += EDITING_INDENT;

    //             rect.y += EditorGUIUtility.singleLineHeight;
    //             drawRect = rect;
    //             SerializedProperty clipList = property.FindPropertyRelative(nameof(SFXDefinition.Clips));
    //             EditorGUI.PropertyField(drawRect, clipList);
    //             rect.y += EditorGUI.GetPropertyHeight(clipList, true);
    //         }
    //         else
    //         {
    //             drawRect.width /= 2;
    //             GUI.Label(drawRect, "Hello this is a sound");
    //             drawRect.x += drawRect.width;
    //             if (GUI.Button(drawRect, "Edit"))
    //             {
    //                 editingProp.boolValue = true;
    //             }
    //         }
    //         if (property.serializedObject.hasModifiedProperties)
    //         {
    //             property.serializedObject.ApplyModifiedProperties();
    //         }
    //     }
    //     public override float GetPropertyHeight(SerializedProperty property, GUIContent label)
    //     {
    //         float height;
    //         SerializedProperty editingProp = property.FindPropertyRelative(nameof(SFXDefinition.Editor_Editing));
    //         if (editingProp.boolValue)
    //         {
    //             height = EditorGUIUtility.singleLineHeight * 1;
    //             height += EditorGUI.GetPropertyHeight(property.FindPropertyRelative(nameof(SFXDefinition.Clips)), true);
    //         }
    //         else
    //         {
    //             height = EditorGUIUtility.singleLineHeight * 1;
    //         }
    //         return height;
    //     }
    // }
}